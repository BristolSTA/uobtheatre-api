import io
from datetime import datetime

import xlsxwriter
from django.http import HttpResponse

from uobtheatre.payments.models import Payment

from . import reports


def card_totals(request):
    """Generates card totals

    Args:
        request (HttpRequest): The HttpRequest

    Returns:
        HttpResponse: The HttpResponse
    """
    start = datetime(2020, 1, 1)
    end = datetime(2021, 12, 30)

    # Generate report
    report = reports.ProviderPeriodTotals(
        start,
        end,
        [
            item
            for item in Payment.PaymentProvider.names
            if not item == Payment.PaymentProvider.CASH.name
        ],
    )

    print(
        report.matched_payments[0].pay_object.performance.production.sales_breakdown()
    )

    output = io.BytesIO()  # Output buffer
    workbook = xlsxwriter.Workbook(output)
    worksheet = workbook.add_worksheet()
    bold = workbook.add_format({"bold": True})
    currency = workbook.add_format({"num_format": "Â£#,##0.00"})

    worksheet.set_column("A:A", 15)
    worksheet.set_column("B:B", 20)
    worksheet.set_column("D:D", 20)
    worksheet.write("A2", "UOB Theatre", bold)
    worksheet.write("B2", "Card Period Totals Report")

    worksheet.write("D2", "Usage Notes:", bold)
    worksheet.write(
        "D3",
        "This report provides summaries and totals of payments taken via a digital payment provider.",
    )
    worksheet.write(
        "D4",
        "Totals are calcualted by summing the payments (which are positive in the chase of a charge, or negative for a refund).",
    )
    worksheet.write(
        "D5",
        "Totals are inclusive of any costs and fees that are charged to the society. Hence, these figures should not be used to calculate account transfers to societies.",
    )

    # Add sheet meta data
    worksheet.write("A4", "Period From")
    worksheet.write("B4", str(start))
    worksheet.write("A5", "Period To")
    worksheet.write("B5", str(end))
    worksheet.write("A6", "Generated At")
    worksheet.write("B6", str(datetime.now()))
    worksheet.write("A7", "Generated By")
    worksheet.write("B7", str(request.user))

    worksheet.write("A9", "No. of Payments")
    worksheet.write("B9", len(report.matched_payments))

    totals_breakdown_start_row = 13
    totals_breakdown_end_row = (
        max(
            [
                len(report.provider_totals.collection),
                len(report.production_totals.collection),
            ]
        )
        + totals_breakdown_start_row
    )

    # Add totals
    worksheet.write(
        "A%s" % (totals_breakdown_start_row - 1), "Totals By Provider", bold
    )
    for i, provider in enumerate(report.provider_totals.collection):
        worksheet.write("A" + str(totals_breakdown_start_row + i), provider.object)
        worksheet.write(
            "B" + str(totals_breakdown_start_row + i), provider.total / 100, currency
        )
    worksheet.write("A%s" % (totals_breakdown_end_row + 1), "Total")
    worksheet.write_formula(
        "B%s" % (totals_breakdown_end_row + 1),
        "=SUM(B%s:B%s)" % (totals_breakdown_start_row, totals_breakdown_end_row),
        currency,
    )

    worksheet.write("D12", "Totals By Production", bold)
    for i, production in enumerate(report.production_totals.collection):
        worksheet.write("D" + str(13 + i), str(production.object))
        worksheet.write("E" + str(13 + i), str(production.object.society))
        worksheet.write("F" + str(13 + i), production.total / 100, currency)
    worksheet.write("E%s" % (totals_breakdown_end_row + 1), "Total")
    worksheet.write_formula(
        "F%s" % (totals_breakdown_end_row + 1),
        "=SUM(F%s:F%s)" % (totals_breakdown_start_row, totals_breakdown_end_row),
        currency,
    )

    workbook.close()

    # Rewind buffer
    output.seek(0)
    response = HttpResponse(
        output,
        content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    )
    response["Content-Disposition"] = (
        "attachment; filename=%s" % "card_totals_report.xlsx"
    )
    return response


def outstanding_production_payments():
    pass
